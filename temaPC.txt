#include <queue.h>
#include "skel.h"

#define BUFF 100

// structure for routing table
typedef struct rtable_entry {
	uint32_t prefix;
	uint32_t next_hop;
	uint32_t mask;
	int interface;
} entry;

typedef struct arp_table_entry {
	uint32_t ip_address;
	uint8_t mac_address[ETH_ALEN];
} arp_entry;

typedef struct trie {
	char value;
	uint32_t next_hop;
	int interface;
	struct trie *left;
	struct trieNode *right;
} trieNode;

typedef struct queue_entry {
	uint32_t address;
	queue q;
} q_entry;

//function to parse the routing table
entry* parse_routing_table(char* filename, int *n) {
	char buffer[100];
	FILE* file = fopen(filename, "r");
	char delim[2] = " ";
	int nr = 0, size = 10;
	entry *vector = malloc(size * sizeof(struct rtable_entry)), *e;
	if (file) {
		char *p;
		while (fgets(buffer, sizeof(char) * BUFF, file)) {
			if (nr >= size) {
				size *= 3;
				vector = realloc(vector, size * sizeof(struct rtable_entry));
			}
			p = strtok(buffer, delim);
			e = malloc(sizeof(struct rtable_entry));
			
			// prefixul
			e->prefix = inet_addr(p);
			p = strtok(NULL, delim);
			
			// next_hop
			e->next_hop = inet_addr(p);
			p = strtok(NULL, delim);

			// mask
			e->mask = inet_addr(p);
			p = strtok(NULL, delim);

			// interface
			e->interface = atoi(p);

			// put in the vector of entries
			vector[nr] = *e;
			nr++;
		}
	}
	fclose(file);
	*n = nr;
	return vector;
}

uint8_t* find(arp_entry* arp_table, uint32_t ip_address, int size) {
	for (int i = 0; i < size; i++) {
		if (ip_address == arp_table[i].ip_address)
			return arp_table[i].mac_address;
	}
	return NULL;
}

int get_interface_router_ip(struct iphdr* ip) {
	for (int i = 0; i < ROUTER_NUM_INTERFACES; i++) {
		if (inet_addr(get_interface_ip(i)) == ip->daddr)
			return i;
	}
	return -1;
}

int get_interface_router_arp(struct arp_header* arp) {
	for (int i = 0; i < ROUTER_NUM_INTERFACES; i++) {
		if (inet_addr(get_interface_ip(i)) == arp->tpa)
			return i;
	}
	return -1;
}

int find_best_route(uint32_t destination, entry* rtable, int size,
	uint32_t* next_hop, int* interface) {
	for (int i = 0; i < size; i++) {
		if ((destination & rtable[i].mask) == rtable[i].prefix) {
			*next_hop = rtable[i].next_hop;
			*interface = rtable[i].interface;
			return 1;
		}
	}
	return 0;
}

uint8_t* find_mac_arp(arp_entry* arp_table, uint32_t address, int size) {
	for (int i = 0; i < size; i++) {
		if (arp_table[i].ip_address == address) {
			return arp_table[i].mac_address;
		}
	}
	return NULL;
}

int contains_arp_entry(arp_entry* arp_table, uint8_t* mac_address,
	uint32_t ip_address, int size) {
	int i;

	for (i = 0; i < size; i++) {
		if (arp_table[i].ip_address == ip_address)
			return 1;
	}
	return 0;
}

int update_arp_table(struct arp_header* arp_hdr, arp_entry* arp_table, int *size,
	int *arp_capacity) {
	int i;

	if (contains_arp_entry(arp_table, arp_hdr->sha, arp_hdr->spa, *size))
		return 0;
	if (*arp_capacity <= *size) {
		*arp_capacity *= 2;
		arp_table = realloc(arp_table, *arp_capacity * sizeof(arp_entry));
	}
	arp_table[*size].ip_address = arp_hdr->spa;
	for (i = 0; i < ETH_ALEN; i++)
		arp_table[*size].mac_address[i] = arp_hdr->sha[i];
	(*size)++;
	return 1;
}

void queues_add(packet *m, uint32_t address, q_entry *vector, int *size, int *capacity) {
	int flag = 0;
	for (int i = 0; i < *size; i++) {
		if (vector[i].address == address) {
			queue_enq(vector[i].q, (void*) &m);
			flag = 1;
		}
	}
	if (flag == 0) {
		q_entry *entry = malloc(sizeof(struct queue_entry));
		if (*size >= *capacity) {
			*capacity *= 2;
			vector = realloc(vector, *capacity * sizeof(struct queue_entry));
		}
		entry->address = address;
		entry->q = queue_create();
		queue_enq(entry->q, m);
		vector[*size] = *entry;
		(*size)++;
	}
}

queue find_queue(q_entry *vector, int size, uint32_t address) {
	for (int i = 0; i < size; i++) {
		if (address == vector[i].address) {
			return vector[i].q;
		}
	}
	return NULL;
}

int main(int argc, char *argv[])
{
	packet m;
	int rc;

	init(argc - 2, argv + 2);

	// size of the vector of entries
	int size = 0;
	entry *rtable = parse_routing_table(argv[1], &size);

	// arp_table;
	int size_arp = 0, arp_capacity = 10;
	arp_entry *arp_table = malloc(sizeof(arp_entry) * arp_capacity);

	// populate arp_table
	// arp_table[0].ip_address = inet_addr("192.168.0.2");
	// hwaddr_aton("de:ad:be:ef:00:00", arp_table[0].mac_address);
	// arp_table[1].ip_address = inet_addr("192.168.1.2");
	// hwaddr_aton("de:ad:be:ef:00:01", arp_table[1].mac_address);
	// arp_table[2].ip_address = inet_addr("192.168.2.2");
	// hwaddr_aton("de:ad:be:ef:00:02", arp_table[2].mac_address);
	// arp_table[3].ip_address = inet_addr("192.168.3.2");
	// hwaddr_aton("de:ad:be:ef:00:03", arp_table[3].mac_address);
	// arp_table[4].ip_address = inet_addr("192.0.1.1");
	// hwaddr_aton("ca:fe:ba:be:00:01", arp_table[4].mac_address);
	// arp_table[5].ip_address = inet_addr("192.0.1.2");
	// hwaddr_aton("ca:fe:ba:be:01:00", arp_table[5].mac_address);
	// size_arp = 6;

	// space where I declare variable
	int interface; // the source interface
	uint8_t *mac_interface = malloc(6 * sizeof(uint8_t)); // the mac of the source

	uint8_t *mac_address_destination;
	uint32_t next_hop;
	int interface_next_hop;
	int flag;

	// the queue needed for packets
	int queues_size = 0, queues_capacity = 10;
	struct queue_entry *vector_queue = malloc(queues_capacity * sizeof(struct queue_entry));

	while (1) {
		setvbuf(stdout, NULL, _IONBF, 0);
		
		rc = get_packet(&m);
		DIE(rc < 0, "get_message");
		/* Students will write code here */

		// extracting the ether_header
		struct ether_header *eth_hdr = (struct ether_header*) m.payload;

		if (ntohs(eth_hdr->ether_type) == ETHERTYPE_IP) {
			printf("Primeste ip\n");
			// extracting the ip header from msg
			struct iphdr *ip_hdr = (struct iphdr*) (m.payload + sizeof(struct ether_header));
			// getting details about router
			interface = get_interface_router_ip(ip_hdr);
			get_interface_mac(interface, mac_interface);

			if (ip_hdr->ttl <= 1) {
				send_icmp_error(ip_hdr->saddr, ip_hdr->daddr, eth_hdr->ether_dhost,
				eth_hdr->ether_shost, ICMP_TIME_EXCEEDED, 0, m.interface);
				continue;
			}
			// managing the icmp requests
			// if icmp_package is NULL, then it is not an ICMP package
			struct icmphdr* icmp_package = parse_icmp(m.payload);
			if (interface != -1) {
				if (icmp_package != NULL) {
					// check if it is an ICMP ECHO request
					// if it is, then send an ICMP ECHO REPLY
					if (icmp_package->type == 8 && ip_hdr->ttl > 1) {
						send_icmp(ip_hdr->saddr, ip_hdr->daddr, eth_hdr->ether_dhost,
						eth_hdr->ether_shost, 0, 0, m.interface,
						icmp_package->un.echo.id, icmp_package->un.echo.sequence);
						continue;
					}
				}
			}
			// now I verify the checksum - if it is 0, then I
			// drop the package and continue receiving packages
			if(ip_checksum(ip_hdr, sizeof(struct iphdr)) != 0) {
				continue;
			}
			// decrementing the ttl
			ip_hdr->ttl--;
			// now I update the checksum
			ip_hdr->check = 0;
			// now to find the route to the desired host
			if(!find_best_route(ip_hdr->daddr, rtable, size, &next_hop, &interface_next_hop)) {
				printf("S-a gasit ruta\n");
				send_icmp_error(ip_hdr->saddr, inet_addr(get_interface_ip(m.interface)),
				eth_hdr->ether_dhost, mac_interface, ICMP_DEST_UNREACH, 0, m.interface);
				continue;	
			}
			// changing the source and destination MACs
			mac_address_destination = find_mac_arp(arp_table, next_hop, size_arp);
			if (mac_address_destination != NULL) {
				printf("aici trimit pachetul ip\n");
				build_ethhdr(eth_hdr, mac_interface, mac_address_destination, htons(ETHERTYPE_IP));
				ip_hdr->check = ip_checksum(ip_hdr, sizeof(struct iphdr));
			} else {
				// I put the packet in the queue
				printf("aici bag in coada\n");
				packet *aux_packet = malloc(sizeof(packet));
				memcpy(aux_packet, &m, sizeof(packet));
				queues_add(aux_packet, next_hop, vector_queue, &queues_size, &queues_capacity);
				for (int j = 0; j < ETH_ALEN; j++) {
					eth_hdr->ether_dhost[j] = 255;
					eth_hdr->ether_shost[j] = mac_interface[j];
				}
				eth_hdr->ether_type = htons(ETHERTYPE_ARP);
				send_arp(next_hop, inet_addr(get_interface_ip(interface_next_hop)),
					eth_hdr, interface_next_hop, htons(ARPOP_REQUEST));
				continue;
			}
			// forwarding the packet
			send_packet(interface_next_hop, &m);
		} else if (ntohs(eth_hdr->ether_type) == ETHERTYPE_ARP) {
			// extracting the arp header
			struct arp_header* arp_hdr = parse_arp(m.payload);
			interface = get_interface_router_arp(arp_hdr);
			get_interface_mac(m.interface, mac_interface);
			// checking if it is an ARP Requests
			if (arp_hdr != NULL) {
				if (ntohs(arp_hdr->op) == ARPOP_REQUEST && interface != -1) {
					memcpy(eth_hdr->ether_dhost, arp_hdr->sha, ETH_ALEN);
					for (int j = 0; j < ETH_ALEN; j++) {
						eth_hdr->ether_shost[j] = mac_interface[j];
					}
					send_arp(arp_hdr->spa, inet_addr(get_interface_ip(m.interface)), eth_hdr,
						m.interface, htons(ARPOP_REPLY));
					continue;
				}
			}

			// TODO - checking if it is an ARP Reply
			if (arp_hdr != NULL) {
				if (htons(arp_hdr->op) == ARPOP_REPLY) {
					flag = update_arp_table(arp_hdr, arp_table, &size_arp, &arp_capacity);
					packet *p;
					queue aux_queue = find_queue(vector_queue, queues_size, arp_hdr->spa);
					while (queue_empty(aux_queue) == 0) {
						p = (packet*) queue_deq(aux_queue);
						printf("%d\n", p->len);
						struct ether_header *ethernet = (struct ether_header*) p->payload;
						struct iphdr *ip_hdr = (struct iphdr*) (p->payload + sizeof(struct ether_header));
						find_best_route(ip_hdr->daddr, rtable, size, &next_hop, &interface_next_hop);
						for (int j = 0; j < ETH_ALEN; j++) {
							ethernet->ether_dhost[j] = arp_hdr->sha[j];
						}
						get_interface_mac(interface_next_hop, ethernet->ether_shost);
						printf("%u\n", ip_hdr->daddr);
						ip_hdr->check = ip_checksum(ip_hdr, sizeof(struct iphdr));
						send_packet(interface_next_hop, p);
						printf("fdfds\n");
					}
				}
			}
		}
	}
}